#!/usr/bin/env bash
set -eu

usage() {
    cat >&2 <<'EOF'
usage: ./difflog $out1 $out2

Compare two Nix build logs, normalizing out boring differences.

This can be useful to test the effect of a change to build scripts,
especially a refactoring that's intended to have no effect.

Each argument can be either:
 * the store path of a build output, or
 * the store path of a derivation for the build.

Each argument will be passed to `nix log` to get the log,
and also used to find the output hash to normalize out.

Normalization includes:
 * replacing the output hash with zeroes
 * stripping ECMA-48(-style) terminal controls, like colors
 * replacing dates, timestamps, and timings with constants
 * sorting runs of certain common messages, to reduce
   nondeterminism from concurrency

original program by gnprice https://gist.github.com/gnprice/1864b871656773f78f419201e8b5cda3
EOF
}


extract_hash() {
    local b="${1##*/}"
    echo "${b%%-*}"
}

find_hash() {
    local outpath
    outpath=$(nix show-derivation "$1" \
              | jq -r '
                  to_entries | .[0].value.outputs.out.path
                  ')

    extract_hash "$outpath"
}

find_hash_lib() {
    local outpath
    outpath=$(nix show-derivation "$1" \
              | jq -r '
                  to_entries | .[0].value.outputs.lib.path
                  ')

    extract_hash "$outpath"
}

find_hash_dev() {
    local outpath
    outpath=$(nix show-derivation "$1" \
              | jq -r '
                  to_entries | .[0].value.outputs.dev.path
                  ')

    extract_hash "$outpath"
}

striplog() {
    export hash=$(find_hash "$1")
    export libhash=$(find_hash_lib "$1")
    export devhash=$(find_hash_dev "$1")

    # `expand` is because in `make` trace lines, I see
    # continuation lines indented with tabs locally
    # but spaces in cached builds.
    nix log "$1" \
      | expand \
      | perl -0pe '
          # Normalize away the output hash.
          s<$ENV{"hash"}>
           <00000000000000000000000000000000>g;
          s<$ENV{"libhash"}>
           <00000000000000000000000000000000>g;
          s<$ENV{"devhash"}>
           <00000000000000000000000000000000>g;

          # Normalize all store hashes
          s|\Q/nix/store\E/[a-z0-9]{32}-|/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g;

          # I see these locally but not in cached builds.
          s<^\@nix \{.*\n><>gm;

          # ECMA-48 control sequences.  I see color in gcc warnings
          # locally, but not in cached builds.
          s<\e\[.*?[\x40-\x7e]><>g;

          # And some other kinds of ECMA-48(-style) terminal magic.
          s<\e[\x20-\x2f].><>g;
          s<\e[\x30-\x5f]><>g;

          # Fix some dates that sneak in impurely.
          s<^configure: autobuild timestamp\.\.\. \K\d+-\d+>
           <20200102-030405>gm;

          # And timestamps, and times.
          s<^\d?\K ?\d:\d\d\.\d+ >
           < 0:00.00 >gm;
          s<\b(time: |elapsed: |in )\K\d+(\.\d+)?s>
           <0.00s>ig;

          # Sort runs of adjacent lines of each of these types.
          s<(^(libtool: compile: |/nix/store/\S+/bin/bash \S+/libtool ).*\n)+>
           < join("", sort(split /^/, $&)) >egm;
          s<(^(libtool: link: |/nix/store/\S+/bin/bash \S+/libtool ).*\n)+>
           < join("", sort(split /^/, $&)) >egm;
          s<(^shrinking /nix/store/.*\n)+>
           < join("", sort(split /^/, $&)) >egm;
          s<(^Installing /nix/store/.*\n)+>
           < join("", sort(split /^/, $&)) >egm;
          s<(^/nix/store/\S+: interpreter directive changed .*\n)+>
           < join("", sort(split /^/, $&)) >egm;
        '
}

d=$(mktemp -d)

if ! (( $# == 2 )); then
    usage
    exit 2
fi

striplog "$1" >"$d"/a.log
striplog "$2" >"$d"/b.log

git diff --no-index "$d"/{a,b}.log
